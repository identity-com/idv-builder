apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-validation-module
  labels:
    app: validation-module
spec:
  # Multiple replicas should now be allowed using rabbitMQ as transport for events
  replicas: 2
  selector:
    matchLabels:
      app: validation-module
  template:
    metadata:
      labels:
        app: validation-module
        requires-aws-creds: "{{ .Values.pods.labels.requiresAwsCreds }}"
    spec:
      containers:
        - name: validation-module
          image: {{ .Values.pods.image.registry }}idvtoolkit/validationmodule:{{ .Values.pods.image.tag }}
          imagePullPolicy: {{ .Values.pods.imagePullPolicy }}
          env:
            # The location of the application config - mapped by the config volume
            # and populated by the idvtoolkit/config
            - name: NODE_CONFIG_DIR
              value: /opt/app/config/config/validationmodule
            {{- if .Values.validationmodule.config }}
            - name: NODE_CONFIG
              value: {{ .Values.validationmodule.config | quote }}
            {{- end}}
            - name: NODE_ENV
              value: {{ .Values.pods.environment }}
            # The DNS name for the db service. Should be available at mongodb://<db name>:27017
            - name: DB_SERVICE
              {{- if .Values.mongodb.internal }}
              value: {{ .Release.Name }}-mongodb
              {{- end}}
            - name: RABBITMQ_SERVICE
              {{- if .Values.rabbitmq.internal }}
              value: {{ .Release.Name }}-rabbitmq
              {{- end}}
            - name: NEW_RELIC_ENABLED
              value: "{{ .Values.newrelic.enabled }}"
          envFrom:
            - secretRef:
                  # these secrets are used to obtain the rabbitmq admin password
                name: {{ .Release.Name }}-rabbitmq
          ports:
            - name: http
              containerPort: 3030
          volumeMounts:
            # Exposes the config to the application
            - mountPath: /opt/app/config
              name: config
              readOnly: true
          readinessProbe:
            httpGet:
              path: /health?includeExternal=true
              port: http
            initialDelaySeconds: 3
            periodSeconds: 30
          livenessProbe:
            httpGet:
              path: /health?includeExternal=true
              port: http
            initialDelaySeconds: 3
            periodSeconds: 30
      initContainers:
        # Loads secrets and sends the config to the application via the config volume
        - name: config
          image: {{ .Values.pods.image.registry }}idvtoolkit/config:{{ .Values.pods.image.tag }}
          imagePullPolicy: {{ .Values.pods.imagePullPolicy }}
          # PodPresets do not currently apply to InitContainers https://github.com/kubernetes/kubernetes/issues/55410
          {{ if .Values.pods.labels.requiresAwsCreds }}
          env:
            - name: AWS_ACCESS_KEY_ID
              value: {{ .Values.aws_access_key_id }}
            - name: AWS_SECRET_ACCESS_KEY
              value: {{ .Values.aws_secret_access_key }}
          {{ end }}
          volumeMounts:
            - mountPath: /resolvedConfig
              name: config
      volumes:
        - name: config
          # Uses tmpfs to avoid storing secrets on disk
          emptyDir: {"medium":"Memory"}
